
process TEST = {
 
   untracked PSet maxEvents = {untracked int32 input = 11}
   source = PoolSource {
                 untracked vstring fileNames = {
                  "file:/uscms_data/d1/stoyan/data/filtered/run_3792.root"
                 //"file:/uscms_data/d1/stoyan/data/filtered/run_3792_restCh.root"   
//		 "dcache:/pnfs/cms/WAX/11/store/data/MTCC/pass1/3792/A/mtcc.00003792.A.testStorageManager_0.0.root"
		 }
#                 untracked uint32 firstEvent = 41215
#		 untracked uint32 firstRun = 0
				 
		 
   }

#--------------------------------------------------
# Specify the data unpacker, which makes the digi
# (Not needed for simulations...)
#--------------------------------------------------
   include "EventFilter/CSCRawToDigi/data/cscFrontierCablingUnpck.cff"
  include "EventFilter/CSCRawToDigi/data/cscUnpacker.cfi"
#   replace muonCSCDigis.UnpackStatusDigis = true
   replace muonCSCDigis.isMTCCData = true
   replace muonCSCDigis.UseExaminer = false

# These are some geometry modules needed for recHits and segments
  include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
  include "Geometry/CSCGeometry/data/cscGeometry.cfi"
  es_module = MuonNumberingInitialization { }

# Need access to calibration constants.
#

### "Fake" DB
#include "CalibMuon/Configuration/data/CSC_FakeConditions.cff"
//include "CalibMuon/Configuration/data/CSC_FakeDBConditions.cff"
//include "RecoLocalMuon/CSCEfficiency/test/CSC_FrontierDBConditionsME42.cff"

es_source a = PoolDBESSource { VPSet toGet = 
                             { {string record = "CSCDBCrosstalkRcd"
                                 string tag = "CSCDBCrosstalk_new_popcon"
                               } 
//                               {string record = "CSCDBGainsRcd"	
//                                 string tag = "CSCDBGains_new_popcon"
//                               }
                             }
                             bool loadAll = true

			    #read from sqlite file
                            string connect = "sqlite_file:/uscms/home/stoyan/work/csc_ana/RecHitFormat/Tim_latest/CMSSW_2_0_0_pre2/src/RecoLocalMuon/CSCRecHitD/test/DBCrossTalk.db"
//string connect = "sqlite_file:/uscms/home/stoyan/work/csc_ana/RecHitFormat/Tim_latest/CMSSW_2_0_0_pre2/src/RecoLocalMuon/CSCRecHitD/test/DBGains.db"	
		            string timetype = "runnumber"

		            #read from DB 
		            #string connect = "frontier://FrontierDev/CMS_COND_CSC"
              
			    PSet DBParameters = 
                              {
			        untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
                                untracked uint32 authenticationMethod = 1
 			      }
                         }


        es_source  = PoolDBESSource { VPSet toGet = {
                                   {string record = "CSCDBGainsRcd"
                                     string tag = "CSCDBGains_new_popcon"
                                    } } 
                                   bool loadAll = true
                                    #read from sqlite_file
				    string connect = "sqlite_file:/uscms/home/stoyan/work/csc_ana/RecHitFormat/Tim_latest/CMSSW_2_0_0_pre2/src/RecoLocalMuon/CSCRecHitD/test/DBGains.db"
                                    string timetype = "runnumber"
				    # read from database
				    #string connect="frontier://FrontierDev/CMS_COND_CSC"
	
			PSet DBParameters = {
			            untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
                                    untracked uint32 authenticationMethod = 1
 			}
                      }
#
       es_source b = PoolDBESSource { VPSet toGet = {
                                   {string record = "CSCDBNoiseMatrixRcd"
                                     string tag = "CSCDBNoiseMatrix_new_popcon"
                                    } }
                                    bool loadAll = true
				   #read from sqlite file
                                   string connect = "sqlite_file:/uscms/home/stoyan/work/csc_ana/RecHitFormat/Tim_latest/CMSSW_2_0_0_pre2/src/RecoLocalMuon/CSCRecHitD/test/DBNoiseMatrix.db"
                                   
				   #read from database
                                   #string connect = "frontier://FrontierDev/CMS_COND_CSC"
				   string timetype = "runnumber"

			PSet DBParameters = {
			           untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
                                   untracked uint32 authenticationMethod = 1
 			}
                                   }
#
        es_source c = PoolDBESSource { VPSet toGet = {
                                   {string record = "CSCDBPedestalsRcd"
                                     string tag = "CSCDBPedestals_new_popcon"
                                    } }
                                    bool loadAll = true
                                    string connect = "sqlite_file:/uscms/home/stoyan/work/csc_ana/RecHitFormat/Tim_latest/CMSSW_2_0_0_pre2/src/RecoLocalMuon/CSCRecHitD/test/DBPedestals.db"
                                    string timetype = "runnumber"
                                    #string connect = "frontier://FrontierDev/CMS_COND_CSC"

			PSet DBParameters = {
			            untracked string authenticationPath="/afs/cern.ch/cms/DB/conddb"
                                    untracked uint32 authenticationMethod = 0
 			}
                                   }





### Frontier DB
#include "CalibMuon/Configuration/data/CSC_FrontierConditions.cff"
## needed for frontier access on new dev servlet
#replace cscConditions.connect = "frontier://FrontierDev/CMS_COND_CSC"
#replace cscConditions.toGet = {
#        { string record = "CSCGainsRcd"
#          string tag = "CSCGains_ideal"},
#        {string record = "CSCNoiseMatrixRcd"
#          string tag = "CSCNoiseMatrix_ideal"},
#        {string record = "CSCcrosstalkRcd"
#          string tag = "CSCCrosstalk_ideal"},
#        {string record = "CSCPedestalsRcd"
#         string tag = "CSCPedestals_ideal"}
#     }



# These are some useful utilities.
  service = Timing { }
  service = SimpleMemoryCheck { }
#
#--------------------------------------------------
# Specify the recHit reconstruction routine.
#--------------------------------------------------

   //include "RecoLocalMuon/CSCRecHitB/data/cscRecHitB_MTCC.cfi"
   include "RecoLocalMuon/CSCRecHitD/data/cscRecHitD.cfi"

#--------------------------------------------------
# Specify the segment reconstruction routine.
#--------------------------------------------------

include "RecoLocalMuon/CSCSegment/data/cscSegments.cfi"
   replace cscSegments.algo_type = 4


#--------------------------------------------------
# Specify the analysis path and output module.
#--------------------------------------------------

 	module out = PoolOutputModule {
    	untracked string fileName ="data.root"
 	}
path p = {muonCSCDigis,csc2DRecHits}
//path p = {muonCSCDigis,csc2DRecHits, cscSegments}
#path p = {muonCSCDigis,csc2DRecHits}
//path p = {muonCSCDigis,csc2DRecHits, cscSegments}
//path p = {muonCSCDigis}

# 	endpath ep = {out}
}
