
process TEST = {
 
   untracked PSet maxEvents = {untracked int32 input = 101}
   source = PoolSource {
                 untracked vstring fileNames = {
#                 "rfio:/castor/cern.ch/user/s/stoyan/data/run_12915.root"
                  "file:/uscms_data/d1/stoyan/data/filtered/run_3792.root"
                 //"file:/uscms_data/d1/stoyan/data/filtered/run_3792_restCh.root"   
		 //"dcache:/pnfs/cms/WAX/11/store/data/MTCC/pass1/3792/A/mtcc.00003792.A.testStorageManager_0.0.root"
#		 "file:/uscms_data/d1/stoyan/data/converted_bare/run4318_0.0.root"
		 }
#                 untracked uint32 firstEvent = 41215
#		 untracked uint32 firstRun = 0
				 
		 
   }

#--------------------------------------------------
# Specify the data unpacker, which makes the digi
# (Not needed for simulations...)
#--------------------------------------------------
   include "EventFilter/CSCRawToDigi/data/cscFrontierCablingUnpck.cff"
  include "EventFilter/CSCRawToDigi/data/cscUnpacker.cfi"
   replace muonCSCDigis.UnpackStatusDigis = true
   replace muonCSCDigis.isMTCCData = true
   replace muonCSCDigis.UseExaminer = false

# These are some geometry modules needed for recHits and segments
  include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
  include "Geometry/CSCGeometry/data/cscGeometry.cfi"
  es_module = MuonNumberingInitialization { }

# Need access to calibration constants.
#

### "Fake" DB
#include "CalibMuon/Configuration/data/CSC_FakeConditions.cff"
include "CalibMuon/Configuration/data/CSC_FakeDBConditions.cff"
//include "RecoLocalMuon/CSCEfficiency/test/CSC_FrontierDBConditionsME42.cff"

### Frontier DB
#include "CalibMuon/Configuration/data/CSC_FrontierConditions.cff"
## needed for frontier access on new dev servlet
#replace cscConditions.connect = "frontier://FrontierDev/CMS_COND_CSC"
#replace cscConditions.toGet = {
#        { string record = "CSCGainsRcd"
#          string tag = "CSCGains_ideal"},
#        {string record = "CSCNoiseMatrixRcd"
#          string tag = "CSCNoiseMatrix_ideal"},
#        {string record = "CSCcrosstalkRcd"
#          string tag = "CSCCrosstalk_ideal"},
#        {string record = "CSCPedestalsRcd"
#         string tag = "CSCPedestals_ideal"}
#     }



# These are some useful utilities.
  service = Timing { }
  service = SimpleMemoryCheck { }
#
#--------------------------------------------------
# Specify the recHit reconstruction routine.
#--------------------------------------------------

#  include "RecoLocalMuon/CSCRecHit/data/csc2DRecHits.cfi"
   //include "RecoLocalMuon/CSCRecHitB/data/cscRecHitB_MTCC.cfi"
   include "RecoLocalMuon/CSCRecHitD/data/cscRecHitD.cfi"
   //replace csc2DRecHits.CSCchamberIdPrefix = 0
   //replace csc2DRecHits.CSCStripDigiProducer = "muonCSCDigis"
   //replace csc2DRecHits.CSCWireDigiProducer = "muonCSCDigis"
//   replace csc2DRecHits.outputFile = "RHB_info2.dat"

#--------------------------------------------------
# Specify the segment reconstruction routine.
#--------------------------------------------------

include "RecoLocalMuon/CSCSegment/data/cscSegments.cfi"
   replace cscSegments.algo_type = 4


#--------------------------------------------------
# Specify the analysis path and output module.
#--------------------------------------------------

 	module out = PoolOutputModule {
    	untracked string fileName ="data.root"
 	}
#path p = {muonCSCDigis,csc2DRecHits}
#path p = {muonCSCDigis,csc2DRecHits, cscSegments}
#path p = {muonCSCDigis,csc2DRecHits}
path p = {muonCSCDigis,csc2DRecHits, cscSegments}
//path p = {muonCSCDigis}

# 	endpath ep = {out}
}
